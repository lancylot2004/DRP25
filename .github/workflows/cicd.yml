name: Continuous Integration / Continuous Deployment

on:
  push:
    branches: [main, feat/cicd]
  workflow_dispatch:
  release:
    types: [published]

jobs:
  # ─────── STAGE 1: CODE QUALITY ───────
  style:
    name: Lint / Style
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run `detekt`
        run: ./gradlew detekt

  # ─────── STAGE 2: TEST ───────
  test-android:
    name: Android Unit Tests
    needs: [style]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: ./gradlew :shared:testDebugUnitTest

  test-ios:
    name: iOS Unit Tests
    needs: [style]
    runs-on: macos-15
    steps:
      - uses: actions/checkout@v4
      - run: ./gradlew :shared:iosSimulatorArm64Test :shared:iosX64Test

  test-integration:
    name: Integration Tests
    needs: [style]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: echo "Run dummy integration tests here"

  # ─────── STAGE 3: BUILD ───────
  build-android:
    name: Build Android APK
    needs: [test-android, test-integration]
    runs-on: ubuntu-latest
    env:
      STORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}
      KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
      KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
    steps:
      - uses: actions/checkout@v4
      - name: Decode keystore
        run: echo "$ANDROID_KEYSTORE" | base64 --decode > keystore.jks
        env:
          ANDROID_KEYSTORE: ${{ secrets.ANDROID_KEYSTORE }}

      - name: Assemble & Sign APK
        run: ./gradlew :shared:assembleRelease -PstorePassword=$STORE_PASSWORD -PkeyAlias=$KEY_ALIAS -PkeyPassword=$KEY_PASSWORD

      - uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: androidApp/build/outputs/apk/release/androidApp-release.apk

  build-ios:
    name: Build iOS IPA
    needs: [test-ios, test-integration]
    runs-on: macos-15
    steps:
      - uses: actions/checkout@v4

      - name: Setup Ruby & Bundler
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3
          bundler-cache: true

      - name: Select XCode 16.3
        run: sudo xcode-select -s /Applications/Xcode_16.3.app

      - name: Decode App Store Connect key
        run: |
          mkdir -p fastlane
          echo "${{ secrets.FASTLANE_IOS_PROV_SECRET }}" | base64 --decode > fastlane/AuthKey.p8

      - name: Build IPA via Fastlane
        uses: maierj/fastlane-action@v3.1.0
        env:
          FASTLANE_IOS_PROV_ID: ${{ secrets.FASTLANE_IOS_PROV_ID }}
          FASTLANE_IOS_PROV_ISSUER: ${{ secrets.FASTLANE_IOS_PROV_ISSUER }}
          FASTLANE_IOS_PROV_SECRET: ${{ secrets.FASTLANE_IOS_PROV_SECRET }}
        with:
          lane: release

      - uses: actions/upload-artifact@v4
        with:
          name: ios-ipa
          path: ./build/deploy.ipa

  # ─────── STAGE 4: PUBLISH ───────
  publish-release:
    name: Publish Artifacts to GitHub Release
    if: github.event_name == 'release'
    needs: [build-ios, build-android]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: android-apk
          path: ./release

      - uses: actions/download-artifact@v3
        with:
          name: ios-ipa
          path: ./release

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./release/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  upload-testflight:
    name: Upload IPA to TestFlight
    needs: build-ios
    runs-on: macos-15
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v3
        with:
          name: ios-ipa
          path: ./build

      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3
          bundler-cache: true

      - name: Decode API Key
        run: |
          mkdir -p fastlane
          echo "FASTLANE_IOS_PROV_JSON" | base64 --decode > fastlane/key.json
        env:
          FASTLANE_IOS_PROV_JSON: ${{ secrets.FASTLANE_IOS_PROV_JSON }}

      - name: Upload to TestFlight
        uses: maierj/fastlane-action@v3.0.0
        with:
          lane: pilot
          options: upload --api_key_path fastlane/key.json --ipa ./build/deploy.ipa
